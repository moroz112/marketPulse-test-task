import React, {Component} from 'react';
import Assets from 'components/assets';
import Sort from 'components/sort';
import Filter from 'components/filter';
import {connect} from 'react-redux';
import {
	setAssets,
	setSortValue,
	setFilterType,
	setFilterValue
} from 'actions';
import {mock} from 'mock';
import _ from "lodash";

class Layout extends Component {
	componentDidMount() {
		this.assets = [];

		mock.scan((acc, cur) => {
			return this.assets.push(cur)
		}).auditTime(1000).subscribe(
			() => {
				this.props.setAssets(this.assets);
				this.assets = [];
			}
		);

	}

	sortAndFilterAssets() {
		let {assets, sortValue, filterType, filterValue} = this.props;

		let sortedAssets = _.sortBy(assets, function (item) {
			return item[sortValue];
		});
		if (filterValue) {
			sortedAssets = _.filter(sortedAssets, (asset) => {
				return filterValue === String(asset[filterType]).toLowerCase().slice(0, filterValue.length)
			})
		}

		return sortedAssets;

	}

	sortByProperty(prop) {
		this.props.setSortValue(prop);
	}

	setFilterType(type) {
		this.props.setFilterType(type)
	}

	setFilterValue(value) {
		this.props.setFilterValue(value)
	}

	render() {
		let {assets} = this.props;
		let filteredAssets = this.sortAndFilterAssets();

		return (
			<div>
				Please pick filter type and type some value into input ==>
				<Filter setFilterType={this.setFilterType.bind(this)} setFilterValue={this.setFilterValue.bind(this)}/>
				Change selector for sorting ===>
				<Sort sortByProperty={this.sortByProperty.bind(this)}/>
				{ assets.length ? <Assets items={filteredAssets}/> : <div>LOADING...</div> }
			</div>
		)
	}
}
const mapStateToProps = (state) => {
	return {
		assets: state.assets,
		sortValue: state.sortValue,
		filterType: state.filterType,
		filterValue: state.filterValue
	}
};
const mapDispatchToProps = {
	setAssets,
	setSortValue,
	setFilterType,
	setFilterValue
};
export default connect(mapStateToProps, mapDispatchToProps)(Layout);